import os  # os is used for file handing when opening the accounts.txt.
import time  # time is used for "wait for 2 seconds" before closing
import random  # To perform random generations
import string  # To access string constants, used in password generation.

filePath = os.path.join(os.getcwd(), "accounts.txt")  # Path for the local directory plus filename
accounts = {}  # Declaring an empty dictionary. accounts.txt loads here.


def main_menu():
    # Load the accounts before starting the main menu
    load_existing_accounts()

    # display the main menu options and receive an input from player then convert to upper case.
    _input = input("== MAIN MENU ==\n"
                   "[1] [login] - Log into an existing account\n"
                   "[2] [register] - Register a new account\n"
                   "[3] [view] - View existing accounts\n"
                   "[4] [exit] - Exit the program\n").upper()

    if _input in ["1", "LOGIN"]:  # If the user has input one of the two login string options
        account_login()
    elif _input in ["2", "REGISTER"]:  # Register new account
        account_creation()
    elif _input in ["3", "VIEW"]:  # View accounts
        view_account()
    elif _input in ["4", "EXIT"]:  # Exit program
        exit_program()
    else:
        print("ERROR: Please check the spellings. Enter the option number inside the brackets.")
        main_menu()  # Reload the main menu


def load_existing_accounts():  # Function loading the account files.
    if os.path.isfile(filePath):  # If the file exists at the file path...
        f = open(filePath)  # ...then open the file
        txt = f.readlines()  # Read all text as a list

        for _line in txt:  # Split each list element by the space in between username and password
            _pair = str.split(_line, " ")
            accounts[_pair[0]] = _pair[1].replace("\n", "")  # Remove trailing linebreak
        f.close()  # print(f"(DEBUG){str(accounts)}")#Debug only
    else:
        # Exit the program if the account file cannot be found.
        print("ERROR: Account file not found! Please make sure the Accounts.txt file is in the "
              "same folder as this python file before starting this program.")
        exit_program()


def account_creation():
    # Nested functions for each variation in account creation.
    def create_username() -> str:  # Returns a string
        while True:  # The user must type the right thing to exit this loop.
            _ = input("Please enter the username you wish to create (no white space): ")
            if " " in _:  # No space is contained within the input
                print("ERROR: No white space allowed.")
            elif _ in accounts:  # Cannot use a pre-existing username
                print("ERROR: username already exists.")
            else:
                return _


    def create_password() -> str:
        _ = ""
        while True:
            _ = input("Enter [Y] to create your own password or [N] to auto-generate: ").upper()
            if _ == "Y":
                return create_password_by_user()  # Let user type in password
            elif _ == "N":
                return create_password_by_system()  # Let system generate password
            else:
                print("ERROR: Invalid input")


    def create_password_by_user() -> str:  # Let the user type in the password they want
        _ = ""
        while True:
            _ = input("Please enter the password you wish to create (no white space): ")
            if " " in _:  # No white space
                print("ERROR: No white space allowed.")
            else:
                return _


    def create_password_by_system() -> str:  # Create a password auto-generated by system.
        # Only allows for passwords 10-20 characters long
        length = input("How long do you want your generated password to be? \n"
                       "    (Enter a number between 10 and 20): ")
        while True:
            if not length.isdecimal():  # If the length typed in is not a number
                length = input("ERROR: Please enter numbers only: ")
            elif int(length) < 10 or int(length) > 20:  # If the number is beween 10 and 20
                length = input("ERROR: Please enter a number between 10 and 20: ")
            else:
                # Append all the letters, numbers, and punctionations as characters allowed to use.
                ch = string.ascii_letters + string.digits + string.punctuation
                # create a list of randomly select a characters, using list comprehension.
                p = ''.join([random.choice(ch) for i in range(int(length))])
                print("Your password is: ", p)
                return p


    # This is the part where the nested methods are called
    print("== Creating new account ==")
    username = create_username()
    password = create_password()

    # Reopen the account file and append the new username and password to it
    f = open(filePath, "a")
    f.write(f"{username} {password}\n")
    f.close()

    print("Account creation successful.")
    # Reloading the account database to update the appended login entry in the accounts variable
    load_existing_accounts()
    main_menu()  # Go back to main menu


def account_login():
    # Take in the input for username
    username = input("== Account login == \nPlease enter your username: ")
    while username not in accounts.keys():  # Username not found
        username = input(f"Error: Username {username} not found, please try again: ")

    # Take in the input for password
    password = input("Please enter your password: ")
    while password != accounts[username]:  # Password incorrect
        password = input(f"Error: Password incorrect, please type in your password again: ")

    print("Account login success! Returning to main menu for the purpose of this demo")
    main_menu()


def view_account():  # View accounts
    # Print each account line by line
    for x in accounts:  # Turn the dictionary-keys into a list.  For each key...
        print(x, accounts[x])  # ... print the key, then print the value.
    main_menu()


def exit_program():
    print("(Program will now exit after 2 seconds)")
    time.sleep(2)  # Exit the program after a 2second delay.
    exit()


main_menu()
